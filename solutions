905. Sort Array By Parity: https://leetcode.com/problems/sort-array-by-parity/description/
Answer

class Solution {
    public int[] sortArrayByParity(int[] A) {
        int[] temp = new int[A.length];
        int counter=0;
        int sizeCounter=A.length-1;
        for(int i=0; i< A.length;i++){
            if(A[i]% 2 == 0){
               temp[counter]=A[i]; 
                counter++;
            }
            else{
                temp[sizeCounter]=A[i]; 
                sizeCounter--;
            }
            
        }
        return temp;
    }
}

867. Transpose Matrix: https://leetcode.com/problems/transpose-matrix/

class Solution {
    public int[][] transpose(int[][] A) {
        int[][] B = new int[A[0].length][A.length];
        for(int i=0; i<A.length;i++){
            for(int j=0;j<A[0].length;j++){
            B[j][i]=A[i][j];
        }
       
        }
        
        return B;
    }
}

384. Shuffle an Array

public class Solution {
	
	int[] original;
    int[] array ;
    Random rand = new Random();
    
    public Solution(int[] nums) {
       array = nums;
        original = nums.clone();
    }
    
    
    /** Resets the array to its original configuration and return it. */
    public int[] reset() {
        array = original;
        original = original.clone();
        return original;
        
    }
    
     private int randRange(int min, int max) {
        return rand.nextInt(max - min) + min;
    }
    
     private void swapAt(int i, int j) {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
    
    /** Returns a random shuffling of the array. */
    public int[] shuffle() {
        
        for(int i=0;i<array.length;i++){
            swapAt(i, randRange(i, array.length));
        }
        return array;
        
        
    }
}


977. Squares of a Sorted Array

class Solution {
		public int[] sortedSquares(int[] A) {
			int[] answer = new int[A.length];
			int start = 0;
			int end = A.length - 1;
			int index=A.length - 1;
            int min=0;
            int max=0;
            
			while (start<end) {
				min = A[start] * A[start];
				max = A[end] * A[end];
				if (max > min) {
                    answer[index] = max;
                    end--;
				} // min>max
				else{
					answer[index] = min;
                    start++;
				} // max>min
                index--;
			} //while
            answer[index] = A[start]*A[end];
            return answer;
		}//main
	}// solution class
